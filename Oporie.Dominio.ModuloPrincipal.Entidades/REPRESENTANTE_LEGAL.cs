//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios en este archivo pueden ocasionar un comportamiento incorrecto y se perderán si
//     el código se vuelve a generar.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
using Capas.Dominio.Core.Entidades;

namespace Oporie.Dominio.ModuloPrincipal.Entidades
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(MATRICULA))]
    [KnownType(typeof(TELEFONO))]
    public partial class REPRESENTANTE_LEGAL: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Propiedades primitivas
    
        [DataMember]
        public System.Guid ID_REPRESENTANTELEGAL
        {
            get { return _iD_REPRESENTANTELEGAL; }
            set
            {
                if (_iD_REPRESENTANTELEGAL != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("La propiedad 'ID_REPRESENTANTELEGAL' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.");
                    }
                    _iD_REPRESENTANTELEGAL = value;
                    OnPropertyChanged("ID_REPRESENTANTELEGAL");
                }
            }
        }
        private System.Guid _iD_REPRESENTANTELEGAL;
    
        [DataMember]
        public System.Guid ID_MATRICULA
        {
            get { return _iD_MATRICULA; }
            set
            {
                if (_iD_MATRICULA != value)
                {
                    ChangeTracker.RecordOriginalValue("ID_MATRICULA", _iD_MATRICULA);
                    if (!IsDeserializing)
                    {
                        if (MATRICULA != null && MATRICULA.ID_MATRICULA != value)
                        {
                            MATRICULA = null;
                        }
                    }
                    _iD_MATRICULA = value;
                    OnPropertyChanged("ID_MATRICULA");
                }
            }
        }
        private System.Guid _iD_MATRICULA;
    
        [DataMember]
        public Nullable<System.Guid> ID_TELEFONO
        {
            get { return _iD_TELEFONO; }
            set
            {
                if (_iD_TELEFONO != value)
                {
                    ChangeTracker.RecordOriginalValue("ID_TELEFONO", _iD_TELEFONO);
                    if (!IsDeserializing)
                    {
                        if (TELEFONO != null && TELEFONO.ID_TELEFONO != value)
                        {
                            TELEFONO = null;
                        }
                    }
                    _iD_TELEFONO = value;
                    OnPropertyChanged("ID_TELEFONO");
                }
            }
        }
        private Nullable<System.Guid> _iD_TELEFONO;
    
        [DataMember]
        public string RLE_CEDULA
        {
            get { return _rLE_CEDULA; }
            set
            {
                if (_rLE_CEDULA != value)
                {
                    _rLE_CEDULA = value;
                    OnPropertyChanged("RLE_CEDULA");
                }
            }
        }
        private string _rLE_CEDULA;
    
        [DataMember]
        public string RLE_FIRSTNAME
        {
            get { return _rLE_FIRSTNAME; }
            set
            {
                if (_rLE_FIRSTNAME != value)
                {
                    _rLE_FIRSTNAME = value;
                    OnPropertyChanged("RLE_FIRSTNAME");
                }
            }
        }
        private string _rLE_FIRSTNAME;
    
        [DataMember]
        public string RLE_LASTNAME
        {
            get { return _rLE_LASTNAME; }
            set
            {
                if (_rLE_LASTNAME != value)
                {
                    _rLE_LASTNAME = value;
                    OnPropertyChanged("RLE_LASTNAME");
                }
            }
        }
        private string _rLE_LASTNAME;
    
        [DataMember]
        public string RLE_DIRECCION
        {
            get { return _rLE_DIRECCION; }
            set
            {
                if (_rLE_DIRECCION != value)
                {
                    _rLE_DIRECCION = value;
                    OnPropertyChanged("RLE_DIRECCION");
                }
            }
        }
        private string _rLE_DIRECCION;
    
        [DataMember]
        public bool RLE_ESTADO
        {
            get { return _rLE_ESTADO; }
            set
            {
                if (_rLE_ESTADO != value)
                {
                    _rLE_ESTADO = value;
                    OnPropertyChanged("RLE_ESTADO");
                }
            }
        }
        private bool _rLE_ESTADO;

        #endregion
        #region Propiedades de navegación
    
        [DataMember]
        public MATRICULA MATRICULA
        {
            get { return _mATRICULA; }
            set
            {
                if (!ReferenceEquals(_mATRICULA, value))
                {
                    var previousValue = _mATRICULA;
                    _mATRICULA = value;
                    FixupMATRICULA(previousValue);
                    OnNavigationPropertyChanged("MATRICULA");
                }
            }
        }
        private MATRICULA _mATRICULA;
    
        [DataMember]
        public TELEFONO TELEFONO
        {
            get { return _tELEFONO; }
            set
            {
                if (!ReferenceEquals(_tELEFONO, value))
                {
                    var previousValue = _tELEFONO;
                    _tELEFONO = value;
                    FixupTELEFONO(previousValue);
                    OnNavigationPropertyChanged("TELEFONO");
                }
            }
        }
        private TELEFONO _tELEFONO;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            MATRICULA = null;
            TELEFONO = null;
        }

        #endregion
        #region Corrección de asociación
    
        private void FixupMATRICULA(MATRICULA previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.REPRESENTANTE_LEGAL.Contains(this))
            {
                previousValue.REPRESENTANTE_LEGAL.Remove(this);
            }
    
            if (MATRICULA != null)
            {
                if (!MATRICULA.REPRESENTANTE_LEGAL.Contains(this))
                {
                    MATRICULA.REPRESENTANTE_LEGAL.Add(this);
                }
    
                ID_MATRICULA = MATRICULA.ID_MATRICULA;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("MATRICULA")
                    && (ChangeTracker.OriginalValues["MATRICULA"] == MATRICULA))
                {
                    ChangeTracker.OriginalValues.Remove("MATRICULA");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("MATRICULA", previousValue);
                }
                if (MATRICULA != null && !MATRICULA.ChangeTracker.ChangeTrackingEnabled)
                {
                    MATRICULA.StartTracking();
                }
            }
        }
    
        private void FixupTELEFONO(TELEFONO previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.REPRESENTANTE_LEGAL.Contains(this))
            {
                previousValue.REPRESENTANTE_LEGAL.Remove(this);
            }
    
            if (TELEFONO != null)
            {
                if (!TELEFONO.REPRESENTANTE_LEGAL.Contains(this))
                {
                    TELEFONO.REPRESENTANTE_LEGAL.Add(this);
                }
    
                ID_TELEFONO = TELEFONO.ID_TELEFONO;
            }
            else if (!skipKeys)
            {
                ID_TELEFONO = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("TELEFONO")
                    && (ChangeTracker.OriginalValues["TELEFONO"] == TELEFONO))
                {
                    ChangeTracker.OriginalValues.Remove("TELEFONO");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("TELEFONO", previousValue);
                }
                if (TELEFONO != null && !TELEFONO.ChangeTracker.ChangeTrackingEnabled)
                {
                    TELEFONO.StartTracking();
                }
            }
        }

        #endregion
    }
}
