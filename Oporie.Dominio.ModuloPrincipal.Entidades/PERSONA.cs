//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios en este archivo pueden ocasionar un comportamiento incorrecto y se perderán si
//     el código se vuelve a generar.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
using Capas.Dominio.Core.Entidades;

namespace Oporie.Dominio.ModuloPrincipal.Entidades
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(CARGO))]
    [KnownType(typeof(TELEFONO))]
    [KnownType(typeof(REPRESENTANTE))]
    public partial class PERSONA: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Propiedades primitivas
    
        [DataMember]
        public System.Guid ID_PERSONA
        {
            get { return _iD_PERSONA; }
            set
            {
                if (_iD_PERSONA != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("La propiedad 'ID_PERSONA' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.");
                    }
                    _iD_PERSONA = value;
                    OnPropertyChanged("ID_PERSONA");
                }
            }
        }
        private System.Guid _iD_PERSONA;
    
        [DataMember]
        public System.Guid ID_AREAGEOGRAFICA
        {
            get { return _iD_AREAGEOGRAFICA; }
            set
            {
                if (_iD_AREAGEOGRAFICA != value)
                {
                    _iD_AREAGEOGRAFICA = value;
                    OnPropertyChanged("ID_AREAGEOGRAFICA");
                }
            }
        }
        private System.Guid _iD_AREAGEOGRAFICA;
    
        [DataMember]
        public Nullable<System.Guid> ID_TELEFONO
        {
            get { return _iD_TELEFONO; }
            set
            {
                if (_iD_TELEFONO != value)
                {
                    ChangeTracker.RecordOriginalValue("ID_TELEFONO", _iD_TELEFONO);
                    if (!IsDeserializing)
                    {
                        if (TELEFONO != null && TELEFONO.ID_TELEFONO != value)
                        {
                            TELEFONO = null;
                        }
                    }
                    _iD_TELEFONO = value;
                    OnPropertyChanged("ID_TELEFONO");
                }
            }
        }
        private Nullable<System.Guid> _iD_TELEFONO;
    
        [DataMember]
        public Nullable<System.Guid> ID_CARGO
        {
            get { return _iD_CARGO; }
            set
            {
                if (_iD_CARGO != value)
                {
                    ChangeTracker.RecordOriginalValue("ID_CARGO", _iD_CARGO);
                    if (!IsDeserializing)
                    {
                        if (CARGO != null && CARGO.ID_CARGO != value)
                        {
                            CARGO = null;
                        }
                    }
                    _iD_CARGO = value;
                    OnPropertyChanged("ID_CARGO");
                }
            }
        }
        private Nullable<System.Guid> _iD_CARGO;
    
        [DataMember]
        public string PER_CEDULA
        {
            get { return _pER_CEDULA; }
            set
            {
                if (_pER_CEDULA != value)
                {
                    _pER_CEDULA = value;
                    OnPropertyChanged("PER_CEDULA");
                }
            }
        }
        private string _pER_CEDULA;
    
        [DataMember]
        public string PER_FIRSTNAME
        {
            get { return _pER_FIRSTNAME; }
            set
            {
                if (_pER_FIRSTNAME != value)
                {
                    _pER_FIRSTNAME = value;
                    OnPropertyChanged("PER_FIRSTNAME");
                }
            }
        }
        private string _pER_FIRSTNAME;
    
        [DataMember]
        public string PER_LASTNAME
        {
            get { return _pER_LASTNAME; }
            set
            {
                if (_pER_LASTNAME != value)
                {
                    _pER_LASTNAME = value;
                    OnPropertyChanged("PER_LASTNAME");
                }
            }
        }
        private string _pER_LASTNAME;
    
        [DataMember]
        public string PER_GENERO
        {
            get { return _pER_GENERO; }
            set
            {
                if (_pER_GENERO != value)
                {
                    _pER_GENERO = value;
                    OnPropertyChanged("PER_GENERO");
                }
            }
        }
        private string _pER_GENERO;
    
        [DataMember]
        public Nullable<System.DateTime> PER_FECHANAC
        {
            get { return _pER_FECHANAC; }
            set
            {
                if (_pER_FECHANAC != value)
                {
                    _pER_FECHANAC = value;
                    OnPropertyChanged("PER_FECHANAC");
                }
            }
        }
        private Nullable<System.DateTime> _pER_FECHANAC;
    
        [DataMember]
        public byte[] PER_FOTO
        {
            get { return _pER_FOTO; }
            set
            {
                if (_pER_FOTO != value)
                {
                    _pER_FOTO = value;
                    OnPropertyChanged("PER_FOTO");
                }
            }
        }
        private byte[] _pER_FOTO;
    
        [DataMember]
        public string PER_LUGARNAC
        {
            get { return _pER_LUGARNAC; }
            set
            {
                if (_pER_LUGARNAC != value)
                {
                    _pER_LUGARNAC = value;
                    OnPropertyChanged("PER_LUGARNAC");
                }
            }
        }
        private string _pER_LUGARNAC;
    
        [DataMember]
        public string PER_DIRECCION
        {
            get { return _pER_DIRECCION; }
            set
            {
                if (_pER_DIRECCION != value)
                {
                    _pER_DIRECCION = value;
                    OnPropertyChanged("PER_DIRECCION");
                }
            }
        }
        private string _pER_DIRECCION;
    
        [DataMember]
        public string PER_ESTADOCIVIL
        {
            get { return _pER_ESTADOCIVIL; }
            set
            {
                if (_pER_ESTADOCIVIL != value)
                {
                    _pER_ESTADOCIVIL = value;
                    OnPropertyChanged("PER_ESTADOCIVIL");
                }
            }
        }
        private string _pER_ESTADOCIVIL;
    
        [DataMember]
        public string PER_EMAIL
        {
            get { return _pER_EMAIL; }
            set
            {
                if (_pER_EMAIL != value)
                {
                    _pER_EMAIL = value;
                    OnPropertyChanged("PER_EMAIL");
                }
            }
        }
        private string _pER_EMAIL;
    
        [DataMember]
        public bool PER_ESTADO
        {
            get { return _pER_ESTADO; }
            set
            {
                if (_pER_ESTADO != value)
                {
                    _pER_ESTADO = value;
                    OnPropertyChanged("PER_ESTADO");
                }
            }
        }
        private bool _pER_ESTADO;

        #endregion
        #region Propiedades de navegación
    
        [DataMember]
        public CARGO CARGO
        {
            get { return _cARGO; }
            set
            {
                if (!ReferenceEquals(_cARGO, value))
                {
                    var previousValue = _cARGO;
                    _cARGO = value;
                    FixupCARGO(previousValue);
                    OnNavigationPropertyChanged("CARGO");
                }
            }
        }
        private CARGO _cARGO;
    
        [DataMember]
        public TELEFONO TELEFONO
        {
            get { return _tELEFONO; }
            set
            {
                if (!ReferenceEquals(_tELEFONO, value))
                {
                    var previousValue = _tELEFONO;
                    _tELEFONO = value;
                    FixupTELEFONO(previousValue);
                    OnNavigationPropertyChanged("TELEFONO");
                }
            }
        }
        private TELEFONO _tELEFONO;
    
        [DataMember]
        public TrackableCollection<REPRESENTANTE> REPRESENTANTE
        {
            get
            {
                if (_rEPRESENTANTE == null)
                {
                    _rEPRESENTANTE = new TrackableCollection<REPRESENTANTE>();
                    _rEPRESENTANTE.CollectionChanged += FixupREPRESENTANTE;
                }
                return _rEPRESENTANTE;
            }
            set
            {
                if (!ReferenceEquals(_rEPRESENTANTE, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking");
                    }
                    if (_rEPRESENTANTE != null)
                    {
                        _rEPRESENTANTE.CollectionChanged -= FixupREPRESENTANTE;
                    }
                    _rEPRESENTANTE = value;
                    if (_rEPRESENTANTE != null)
                    {
                        _rEPRESENTANTE.CollectionChanged += FixupREPRESENTANTE;
                    }
                    OnNavigationPropertyChanged("REPRESENTANTE");
                }
            }
        }
        private TrackableCollection<REPRESENTANTE> _rEPRESENTANTE;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            CARGO = null;
            TELEFONO = null;
            REPRESENTANTE.Clear();
        }

        #endregion
        #region Corrección de asociación
    
        private void FixupCARGO(CARGO previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.PERSONA.Contains(this))
            {
                previousValue.PERSONA.Remove(this);
            }
    
            if (CARGO != null)
            {
                if (!CARGO.PERSONA.Contains(this))
                {
                    CARGO.PERSONA.Add(this);
                }
    
                ID_CARGO = CARGO.ID_CARGO;
            }
            else if (!skipKeys)
            {
                ID_CARGO = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("CARGO")
                    && (ChangeTracker.OriginalValues["CARGO"] == CARGO))
                {
                    ChangeTracker.OriginalValues.Remove("CARGO");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("CARGO", previousValue);
                }
                if (CARGO != null && !CARGO.ChangeTracker.ChangeTrackingEnabled)
                {
                    CARGO.StartTracking();
                }
            }
        }
    
        private void FixupTELEFONO(TELEFONO previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.PERSONA.Contains(this))
            {
                previousValue.PERSONA.Remove(this);
            }
    
            if (TELEFONO != null)
            {
                if (!TELEFONO.PERSONA.Contains(this))
                {
                    TELEFONO.PERSONA.Add(this);
                }
    
                ID_TELEFONO = TELEFONO.ID_TELEFONO;
            }
            else if (!skipKeys)
            {
                ID_TELEFONO = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("TELEFONO")
                    && (ChangeTracker.OriginalValues["TELEFONO"] == TELEFONO))
                {
                    ChangeTracker.OriginalValues.Remove("TELEFONO");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("TELEFONO", previousValue);
                }
                if (TELEFONO != null && !TELEFONO.ChangeTracker.ChangeTrackingEnabled)
                {
                    TELEFONO.StartTracking();
                }
            }
        }
    
        private void FixupREPRESENTANTE(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (REPRESENTANTE item in e.NewItems)
                {
                    item.PERSONA = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("REPRESENTANTE", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (REPRESENTANTE item in e.OldItems)
                {
                    if (ReferenceEquals(item.PERSONA, this))
                    {
                        item.PERSONA = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("REPRESENTANTE", item);
                    }
                }
            }
        }

        #endregion
    }
}
