//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios en este archivo pueden ocasionar un comportamiento incorrecto y se perderán si
//     el código se vuelve a generar.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
using Capas.Dominio.Core.Entidades;

namespace Oporie.Dominio.ModuloPrincipal.Entidades
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(REPRESENTANTE))]
    public partial class ENTORNO_FAMILIAR: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Propiedades primitivas
    
        [DataMember]
        public System.Guid ID_ENTORNOFAMILIAR
        {
            get { return _iD_ENTORNOFAMILIAR; }
            set
            {
                if (_iD_ENTORNOFAMILIAR != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("La propiedad 'ID_ENTORNOFAMILIAR' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.");
                    }
                    _iD_ENTORNOFAMILIAR = value;
                    OnPropertyChanged("ID_ENTORNOFAMILIAR");
                }
            }
        }
        private System.Guid _iD_ENTORNOFAMILIAR;
    
        [DataMember]
        public Nullable<System.Guid> ID_STATUSVIVIENDA
        {
            get { return _iD_STATUSVIVIENDA; }
            set
            {
                if (_iD_STATUSVIVIENDA != value)
                {
                    _iD_STATUSVIVIENDA = value;
                    OnPropertyChanged("ID_STATUSVIVIENDA");
                }
            }
        }
        private Nullable<System.Guid> _iD_STATUSVIVIENDA;
    
        [DataMember]
        public Nullable<System.Guid> ID_TIPOVIVIENDA
        {
            get { return _iD_TIPOVIVIENDA; }
            set
            {
                if (_iD_TIPOVIVIENDA != value)
                {
                    _iD_TIPOVIVIENDA = value;
                    OnPropertyChanged("ID_TIPOVIVIENDA");
                }
            }
        }
        private Nullable<System.Guid> _iD_TIPOVIVIENDA;
    
        [DataMember]
        public Nullable<System.Guid> ID_SECTOR
        {
            get { return _iD_SECTOR; }
            set
            {
                if (_iD_SECTOR != value)
                {
                    _iD_SECTOR = value;
                    OnPropertyChanged("ID_SECTOR");
                }
            }
        }
        private Nullable<System.Guid> _iD_SECTOR;
    
        [DataMember]
        public Nullable<System.Guid> ID_REPRESENTANTE
        {
            get { return _iD_REPRESENTANTE; }
            set
            {
                if (_iD_REPRESENTANTE != value)
                {
                    ChangeTracker.RecordOriginalValue("ID_REPRESENTANTE", _iD_REPRESENTANTE);
                    if (!IsDeserializing)
                    {
                        if (REPRESENTANTE != null && REPRESENTANTE.ID_REPRESENTANTE != value)
                        {
                            REPRESENTANTE = null;
                        }
                    }
                    _iD_REPRESENTANTE = value;
                    OnPropertyChanged("ID_REPRESENTANTE");
                }
            }
        }
        private Nullable<System.Guid> _iD_REPRESENTANTE;
    
        [DataMember]
        public string EFA_DIRECCIONTRABAJO
        {
            get { return _eFA_DIRECCIONTRABAJO; }
            set
            {
                if (_eFA_DIRECCIONTRABAJO != value)
                {
                    _eFA_DIRECCIONTRABAJO = value;
                    OnPropertyChanged("EFA_DIRECCIONTRABAJO");
                }
            }
        }
        private string _eFA_DIRECCIONTRABAJO;
    
        [DataMember]
        public string EFA_INSTRUCCION
        {
            get { return _eFA_INSTRUCCION; }
            set
            {
                if (_eFA_INSTRUCCION != value)
                {
                    _eFA_INSTRUCCION = value;
                    OnPropertyChanged("EFA_INSTRUCCION");
                }
            }
        }
        private string _eFA_INSTRUCCION;
    
        [DataMember]
        public string EFA_PROFESION
        {
            get { return _eFA_PROFESION; }
            set
            {
                if (_eFA_PROFESION != value)
                {
                    _eFA_PROFESION = value;
                    OnPropertyChanged("EFA_PROFESION");
                }
            }
        }
        private string _eFA_PROFESION;
    
        [DataMember]
        public string EFA_OCUPACION
        {
            get { return _eFA_OCUPACION; }
            set
            {
                if (_eFA_OCUPACION != value)
                {
                    _eFA_OCUPACION = value;
                    OnPropertyChanged("EFA_OCUPACION");
                }
            }
        }
        private string _eFA_OCUPACION;
    
        [DataMember]
        public string EFA_OTRASACTIVIDADES
        {
            get { return _eFA_OTRASACTIVIDADES; }
            set
            {
                if (_eFA_OTRASACTIVIDADES != value)
                {
                    _eFA_OTRASACTIVIDADES = value;
                    OnPropertyChanged("EFA_OTRASACTIVIDADES");
                }
            }
        }
        private string _eFA_OTRASACTIVIDADES;
    
        [DataMember]
        public string EFA_TIEMPOLIBRE
        {
            get { return _eFA_TIEMPOLIBRE; }
            set
            {
                if (_eFA_TIEMPOLIBRE != value)
                {
                    _eFA_TIEMPOLIBRE = value;
                    OnPropertyChanged("EFA_TIEMPOLIBRE");
                }
            }
        }
        private string _eFA_TIEMPOLIBRE;
    
        [DataMember]
        public Nullable<short> EFA_NUMEROEMBARAZOS
        {
            get { return _eFA_NUMEROEMBARAZOS; }
            set
            {
                if (_eFA_NUMEROEMBARAZOS != value)
                {
                    _eFA_NUMEROEMBARAZOS = value;
                    OnPropertyChanged("EFA_NUMEROEMBARAZOS");
                }
            }
        }
        private Nullable<short> _eFA_NUMEROEMBARAZOS;
    
        [DataMember]
        public Nullable<short> EFA_NUMEROPARTOS
        {
            get { return _eFA_NUMEROPARTOS; }
            set
            {
                if (_eFA_NUMEROPARTOS != value)
                {
                    _eFA_NUMEROPARTOS = value;
                    OnPropertyChanged("EFA_NUMEROPARTOS");
                }
            }
        }
        private Nullable<short> _eFA_NUMEROPARTOS;
    
        [DataMember]
        public string EFA_OBSERVACIONES
        {
            get { return _eFA_OBSERVACIONES; }
            set
            {
                if (_eFA_OBSERVACIONES != value)
                {
                    _eFA_OBSERVACIONES = value;
                    OnPropertyChanged("EFA_OBSERVACIONES");
                }
            }
        }
        private string _eFA_OBSERVACIONES;
    
        [DataMember]
        public bool EFA_ESTADO
        {
            get { return _eFA_ESTADO; }
            set
            {
                if (_eFA_ESTADO != value)
                {
                    _eFA_ESTADO = value;
                    OnPropertyChanged("EFA_ESTADO");
                }
            }
        }
        private bool _eFA_ESTADO;

        #endregion
        #region Propiedades de navegación
    
        [DataMember]
        public REPRESENTANTE REPRESENTANTE
        {
            get { return _rEPRESENTANTE; }
            set
            {
                if (!ReferenceEquals(_rEPRESENTANTE, value))
                {
                    var previousValue = _rEPRESENTANTE;
                    _rEPRESENTANTE = value;
                    FixupREPRESENTANTE(previousValue);
                    OnNavigationPropertyChanged("REPRESENTANTE");
                }
            }
        }
        private REPRESENTANTE _rEPRESENTANTE;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            REPRESENTANTE = null;
        }

        #endregion
        #region Corrección de asociación
    
        private void FixupREPRESENTANTE(REPRESENTANTE previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.ENTORNO_FAMILIAR.Contains(this))
            {
                previousValue.ENTORNO_FAMILIAR.Remove(this);
            }
    
            if (REPRESENTANTE != null)
            {
                if (!REPRESENTANTE.ENTORNO_FAMILIAR.Contains(this))
                {
                    REPRESENTANTE.ENTORNO_FAMILIAR.Add(this);
                }
    
                ID_REPRESENTANTE = REPRESENTANTE.ID_REPRESENTANTE;
            }
            else if (!skipKeys)
            {
                ID_REPRESENTANTE = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("REPRESENTANTE")
                    && (ChangeTracker.OriginalValues["REPRESENTANTE"] == REPRESENTANTE))
                {
                    ChangeTracker.OriginalValues.Remove("REPRESENTANTE");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("REPRESENTANTE", previousValue);
                }
                if (REPRESENTANTE != null && !REPRESENTANTE.ChangeTracker.ChangeTrackingEnabled)
                {
                    REPRESENTANTE.StartTracking();
                }
            }
        }

        #endregion
    }
}
