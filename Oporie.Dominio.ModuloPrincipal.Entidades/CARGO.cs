//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios en este archivo pueden ocasionar un comportamiento incorrecto y se perderán si
//     el código se vuelve a generar.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
using Capas.Dominio.Core.Entidades;

namespace Oporie.Dominio.ModuloPrincipal.Entidades
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(PERSONA))]
    [KnownType(typeof(CARGO))]
    public partial class CARGO: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Propiedades primitivas
    
        [DataMember]
        public System.Guid ID_CARGO
        {
            get { return _iD_CARGO; }
            set
            {
                if (_iD_CARGO != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("La propiedad 'ID_CARGO' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.");
                    }
                    _iD_CARGO = value;
                    OnPropertyChanged("ID_CARGO");
                }
            }
        }
        private System.Guid _iD_CARGO;
    
        [DataMember]
        public Nullable<System.Guid> ID_CARGOPADRE
        {
            get { return _iD_CARGOPADRE; }
            set
            {
                if (_iD_CARGOPADRE != value)
                {
                    ChangeTracker.RecordOriginalValue("ID_CARGOPADRE", _iD_CARGOPADRE);
                    if (!IsDeserializing)
                    {
                        if (CARGO2 != null && CARGO2.ID_CARGO != value)
                        {
                            CARGO2 = null;
                        }
                    }
                    _iD_CARGOPADRE = value;
                    OnPropertyChanged("ID_CARGOPADRE");
                }
            }
        }
        private Nullable<System.Guid> _iD_CARGOPADRE;
    
        [DataMember]
        public string CAR_CODIGO
        {
            get { return _cAR_CODIGO; }
            set
            {
                if (_cAR_CODIGO != value)
                {
                    _cAR_CODIGO = value;
                    OnPropertyChanged("CAR_CODIGO");
                }
            }
        }
        private string _cAR_CODIGO;
    
        [DataMember]
        public string CAR_DESCRIPCION
        {
            get { return _cAR_DESCRIPCION; }
            set
            {
                if (_cAR_DESCRIPCION != value)
                {
                    _cAR_DESCRIPCION = value;
                    OnPropertyChanged("CAR_DESCRIPCION");
                }
            }
        }
        private string _cAR_DESCRIPCION;
    
        [DataMember]
        public bool CAR_ESTADO
        {
            get { return _cAR_ESTADO; }
            set
            {
                if (_cAR_ESTADO != value)
                {
                    _cAR_ESTADO = value;
                    OnPropertyChanged("CAR_ESTADO");
                }
            }
        }
        private bool _cAR_ESTADO;

        #endregion
        #region Propiedades de navegación
    
        [DataMember]
        public TrackableCollection<PERSONA> PERSONA
        {
            get
            {
                if (_pERSONA == null)
                {
                    _pERSONA = new TrackableCollection<PERSONA>();
                    _pERSONA.CollectionChanged += FixupPERSONA;
                }
                return _pERSONA;
            }
            set
            {
                if (!ReferenceEquals(_pERSONA, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking");
                    }
                    if (_pERSONA != null)
                    {
                        _pERSONA.CollectionChanged -= FixupPERSONA;
                    }
                    _pERSONA = value;
                    if (_pERSONA != null)
                    {
                        _pERSONA.CollectionChanged += FixupPERSONA;
                    }
                    OnNavigationPropertyChanged("PERSONA");
                }
            }
        }
        private TrackableCollection<PERSONA> _pERSONA;
    
        [DataMember]
        public TrackableCollection<CARGO> CARGO1
        {
            get
            {
                if (_cARGO1 == null)
                {
                    _cARGO1 = new TrackableCollection<CARGO>();
                    _cARGO1.CollectionChanged += FixupCARGO1;
                }
                return _cARGO1;
            }
            set
            {
                if (!ReferenceEquals(_cARGO1, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking");
                    }
                    if (_cARGO1 != null)
                    {
                        _cARGO1.CollectionChanged -= FixupCARGO1;
                    }
                    _cARGO1 = value;
                    if (_cARGO1 != null)
                    {
                        _cARGO1.CollectionChanged += FixupCARGO1;
                    }
                    OnNavigationPropertyChanged("CARGO1");
                }
            }
        }
        private TrackableCollection<CARGO> _cARGO1;
    
        [DataMember]
        public CARGO CARGO2
        {
            get { return _cARGO2; }
            set
            {
                if (!ReferenceEquals(_cARGO2, value))
                {
                    var previousValue = _cARGO2;
                    _cARGO2 = value;
                    FixupCARGO2(previousValue);
                    OnNavigationPropertyChanged("CARGO2");
                }
            }
        }
        private CARGO _cARGO2;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            PERSONA.Clear();
            CARGO1.Clear();
            CARGO2 = null;
        }

        #endregion
        #region Corrección de asociación
    
        private void FixupCARGO2(CARGO previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.CARGO1.Contains(this))
            {
                previousValue.CARGO1.Remove(this);
            }
    
            if (CARGO2 != null)
            {
                if (!CARGO2.CARGO1.Contains(this))
                {
                    CARGO2.CARGO1.Add(this);
                }
    
                ID_CARGOPADRE = CARGO2.ID_CARGO;
            }
            else if (!skipKeys)
            {
                ID_CARGOPADRE = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("CARGO2")
                    && (ChangeTracker.OriginalValues["CARGO2"] == CARGO2))
                {
                    ChangeTracker.OriginalValues.Remove("CARGO2");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("CARGO2", previousValue);
                }
                if (CARGO2 != null && !CARGO2.ChangeTracker.ChangeTrackingEnabled)
                {
                    CARGO2.StartTracking();
                }
            }
        }
    
        private void FixupPERSONA(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (PERSONA item in e.NewItems)
                {
                    item.CARGO = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("PERSONA", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (PERSONA item in e.OldItems)
                {
                    if (ReferenceEquals(item.CARGO, this))
                    {
                        item.CARGO = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("PERSONA", item);
                    }
                }
            }
        }
    
        private void FixupCARGO1(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (CARGO item in e.NewItems)
                {
                    item.CARGO2 = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("CARGO1", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CARGO item in e.OldItems)
                {
                    if (ReferenceEquals(item.CARGO2, this))
                    {
                        item.CARGO2 = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("CARGO1", item);
                    }
                }
            }
        }

        #endregion
    }
}
