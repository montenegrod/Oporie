//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios en este archivo pueden ocasionar un comportamiento incorrecto y se perderán si
//     el código se vuelve a generar.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
using Capas.Dominio.Core.Entidades;

namespace Oporie.Dominio.ModuloPrincipal.Entidades
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(AREA_GEOGRAFICA))]
    [KnownType(typeof(TELEFONO))]
    [KnownType(typeof(INSCRIPCION))]
    [KnownType(typeof(REPRESENTANTE))]
    public partial class ALUMNO: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Propiedades primitivas
    
        [DataMember]
        public System.Guid ID_ALUMNO
        {
            get { return _iD_ALUMNO; }
            set
            {
                if (_iD_ALUMNO != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("La propiedad 'ID_ALUMNO' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.");
                    }
                    _iD_ALUMNO = value;
                    OnPropertyChanged("ID_ALUMNO");
                }
            }
        }
        private System.Guid _iD_ALUMNO;
    
        [DataMember]
        public System.Guid ID_AREAGEOGRAFICA
        {
            get { return _iD_AREAGEOGRAFICA; }
            set
            {
                if (_iD_AREAGEOGRAFICA != value)
                {
                    ChangeTracker.RecordOriginalValue("ID_AREAGEOGRAFICA", _iD_AREAGEOGRAFICA);
                    if (!IsDeserializing)
                    {
                        if (AREA_GEOGRAFICA != null && AREA_GEOGRAFICA.ID_AREAGEOGRAFICA != value)
                        {
                            AREA_GEOGRAFICA = null;
                        }
                    }
                    _iD_AREAGEOGRAFICA = value;
                    OnPropertyChanged("ID_AREAGEOGRAFICA");
                }
            }
        }
        private System.Guid _iD_AREAGEOGRAFICA;
    
        [DataMember]
        public Nullable<System.Guid> ID_TELEFONO
        {
            get { return _iD_TELEFONO; }
            set
            {
                if (_iD_TELEFONO != value)
                {
                    ChangeTracker.RecordOriginalValue("ID_TELEFONO", _iD_TELEFONO);
                    if (!IsDeserializing)
                    {
                        if (TELEFONO != null && TELEFONO.ID_TELEFONO != value)
                        {
                            TELEFONO = null;
                        }
                    }
                    _iD_TELEFONO = value;
                    OnPropertyChanged("ID_TELEFONO");
                }
            }
        }
        private Nullable<System.Guid> _iD_TELEFONO;
    
        [DataMember]
        public Nullable<System.Guid> ALU_ID_INGRESADOPOR
        {
            get { return _aLU_ID_INGRESADOPOR; }
            set
            {
                if (_aLU_ID_INGRESADOPOR != value)
                {
                    _aLU_ID_INGRESADOPOR = value;
                    OnPropertyChanged("ALU_ID_INGRESADOPOR");
                }
            }
        }
        private Nullable<System.Guid> _aLU_ID_INGRESADOPOR;
    
        [DataMember]
        public string ALU_CEDULA
        {
            get { return _aLU_CEDULA; }
            set
            {
                if (_aLU_CEDULA != value)
                {
                    _aLU_CEDULA = value;
                    OnPropertyChanged("ALU_CEDULA");
                }
            }
        }
        private string _aLU_CEDULA;
    
        [DataMember]
        public string ALU_FIRSTNAME
        {
            get { return _aLU_FIRSTNAME; }
            set
            {
                if (_aLU_FIRSTNAME != value)
                {
                    _aLU_FIRSTNAME = value;
                    OnPropertyChanged("ALU_FIRSTNAME");
                }
            }
        }
        private string _aLU_FIRSTNAME;
    
        [DataMember]
        public string ALU_LASTNAME
        {
            get { return _aLU_LASTNAME; }
            set
            {
                if (_aLU_LASTNAME != value)
                {
                    _aLU_LASTNAME = value;
                    OnPropertyChanged("ALU_LASTNAME");
                }
            }
        }
        private string _aLU_LASTNAME;
    
        [DataMember]
        public string ALU_GENERO
        {
            get { return _aLU_GENERO; }
            set
            {
                if (_aLU_GENERO != value)
                {
                    _aLU_GENERO = value;
                    OnPropertyChanged("ALU_GENERO");
                }
            }
        }
        private string _aLU_GENERO;
    
        [DataMember]
        public Nullable<System.DateTime> ALU_FECHANAC
        {
            get { return _aLU_FECHANAC; }
            set
            {
                if (_aLU_FECHANAC != value)
                {
                    _aLU_FECHANAC = value;
                    OnPropertyChanged("ALU_FECHANAC");
                }
            }
        }
        private Nullable<System.DateTime> _aLU_FECHANAC;
    
        [DataMember]
        public byte[] ALU_FOTO
        {
            get { return _aLU_FOTO; }
            set
            {
                if (_aLU_FOTO != value)
                {
                    _aLU_FOTO = value;
                    OnPropertyChanged("ALU_FOTO");
                }
            }
        }
        private byte[] _aLU_FOTO;
    
        [DataMember]
        public string ALU_LUGARNAC
        {
            get { return _aLU_LUGARNAC; }
            set
            {
                if (_aLU_LUGARNAC != value)
                {
                    _aLU_LUGARNAC = value;
                    OnPropertyChanged("ALU_LUGARNAC");
                }
            }
        }
        private string _aLU_LUGARNAC;
    
        [DataMember]
        public string ALU_DIRECCION
        {
            get { return _aLU_DIRECCION; }
            set
            {
                if (_aLU_DIRECCION != value)
                {
                    _aLU_DIRECCION = value;
                    OnPropertyChanged("ALU_DIRECCION");
                }
            }
        }
        private string _aLU_DIRECCION;
    
        [DataMember]
        public Nullable<System.DateTime> ALU_FECHAINGRESO
        {
            get { return _aLU_FECHAINGRESO; }
            set
            {
                if (_aLU_FECHAINGRESO != value)
                {
                    _aLU_FECHAINGRESO = value;
                    OnPropertyChanged("ALU_FECHAINGRESO");
                }
            }
        }
        private Nullable<System.DateTime> _aLU_FECHAINGRESO;
    
        [DataMember]
        public string ALU_ESTADOCIVIL
        {
            get { return _aLU_ESTADOCIVIL; }
            set
            {
                if (_aLU_ESTADOCIVIL != value)
                {
                    _aLU_ESTADOCIVIL = value;
                    OnPropertyChanged("ALU_ESTADOCIVIL");
                }
            }
        }
        private string _aLU_ESTADOCIVIL;
    
        [DataMember]
        public string ALU_EMAIL
        {
            get { return _aLU_EMAIL; }
            set
            {
                if (_aLU_EMAIL != value)
                {
                    _aLU_EMAIL = value;
                    OnPropertyChanged("ALU_EMAIL");
                }
            }
        }
        private string _aLU_EMAIL;
    
        [DataMember]
        public bool ALU_ESTADO
        {
            get { return _aLU_ESTADO; }
            set
            {
                if (_aLU_ESTADO != value)
                {
                    _aLU_ESTADO = value;
                    OnPropertyChanged("ALU_ESTADO");
                }
            }
        }
        private bool _aLU_ESTADO;

        #endregion
        #region Propiedades de navegación
    
        [DataMember]
        public AREA_GEOGRAFICA AREA_GEOGRAFICA
        {
            get { return _aREA_GEOGRAFICA; }
            set
            {
                if (!ReferenceEquals(_aREA_GEOGRAFICA, value))
                {
                    var previousValue = _aREA_GEOGRAFICA;
                    _aREA_GEOGRAFICA = value;
                    FixupAREA_GEOGRAFICA(previousValue);
                    OnNavigationPropertyChanged("AREA_GEOGRAFICA");
                }
            }
        }
        private AREA_GEOGRAFICA _aREA_GEOGRAFICA;
    
        [DataMember]
        public TELEFONO TELEFONO
        {
            get { return _tELEFONO; }
            set
            {
                if (!ReferenceEquals(_tELEFONO, value))
                {
                    var previousValue = _tELEFONO;
                    _tELEFONO = value;
                    FixupTELEFONO(previousValue);
                    OnNavigationPropertyChanged("TELEFONO");
                }
            }
        }
        private TELEFONO _tELEFONO;
    
        [DataMember]
        public TrackableCollection<INSCRIPCION> INSCRIPCION
        {
            get
            {
                if (_iNSCRIPCION == null)
                {
                    _iNSCRIPCION = new TrackableCollection<INSCRIPCION>();
                    _iNSCRIPCION.CollectionChanged += FixupINSCRIPCION;
                }
                return _iNSCRIPCION;
            }
            set
            {
                if (!ReferenceEquals(_iNSCRIPCION, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking");
                    }
                    if (_iNSCRIPCION != null)
                    {
                        _iNSCRIPCION.CollectionChanged -= FixupINSCRIPCION;
                    }
                    _iNSCRIPCION = value;
                    if (_iNSCRIPCION != null)
                    {
                        _iNSCRIPCION.CollectionChanged += FixupINSCRIPCION;
                    }
                    OnNavigationPropertyChanged("INSCRIPCION");
                }
            }
        }
        private TrackableCollection<INSCRIPCION> _iNSCRIPCION;
    
        [DataMember]
        public TrackableCollection<REPRESENTANTE> REPRESENTANTE
        {
            get
            {
                if (_rEPRESENTANTE == null)
                {
                    _rEPRESENTANTE = new TrackableCollection<REPRESENTANTE>();
                    _rEPRESENTANTE.CollectionChanged += FixupREPRESENTANTE;
                }
                return _rEPRESENTANTE;
            }
            set
            {
                if (!ReferenceEquals(_rEPRESENTANTE, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking");
                    }
                    if (_rEPRESENTANTE != null)
                    {
                        _rEPRESENTANTE.CollectionChanged -= FixupREPRESENTANTE;
                    }
                    _rEPRESENTANTE = value;
                    if (_rEPRESENTANTE != null)
                    {
                        _rEPRESENTANTE.CollectionChanged += FixupREPRESENTANTE;
                    }
                    OnNavigationPropertyChanged("REPRESENTANTE");
                }
            }
        }
        private TrackableCollection<REPRESENTANTE> _rEPRESENTANTE;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            AREA_GEOGRAFICA = null;
            TELEFONO = null;
            INSCRIPCION.Clear();
            REPRESENTANTE.Clear();
        }

        #endregion
        #region Corrección de asociación
    
        private void FixupAREA_GEOGRAFICA(AREA_GEOGRAFICA previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.ALUMNO.Contains(this))
            {
                previousValue.ALUMNO.Remove(this);
            }
    
            if (AREA_GEOGRAFICA != null)
            {
                if (!AREA_GEOGRAFICA.ALUMNO.Contains(this))
                {
                    AREA_GEOGRAFICA.ALUMNO.Add(this);
                }
    
                ID_AREAGEOGRAFICA = AREA_GEOGRAFICA.ID_AREAGEOGRAFICA;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("AREA_GEOGRAFICA")
                    && (ChangeTracker.OriginalValues["AREA_GEOGRAFICA"] == AREA_GEOGRAFICA))
                {
                    ChangeTracker.OriginalValues.Remove("AREA_GEOGRAFICA");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("AREA_GEOGRAFICA", previousValue);
                }
                if (AREA_GEOGRAFICA != null && !AREA_GEOGRAFICA.ChangeTracker.ChangeTrackingEnabled)
                {
                    AREA_GEOGRAFICA.StartTracking();
                }
            }
        }
    
        private void FixupTELEFONO(TELEFONO previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.ALUMNO.Contains(this))
            {
                previousValue.ALUMNO.Remove(this);
            }
    
            if (TELEFONO != null)
            {
                if (!TELEFONO.ALUMNO.Contains(this))
                {
                    TELEFONO.ALUMNO.Add(this);
                }
    
                ID_TELEFONO = TELEFONO.ID_TELEFONO;
            }
            else if (!skipKeys)
            {
                ID_TELEFONO = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("TELEFONO")
                    && (ChangeTracker.OriginalValues["TELEFONO"] == TELEFONO))
                {
                    ChangeTracker.OriginalValues.Remove("TELEFONO");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("TELEFONO", previousValue);
                }
                if (TELEFONO != null && !TELEFONO.ChangeTracker.ChangeTrackingEnabled)
                {
                    TELEFONO.StartTracking();
                }
            }
        }
    
        private void FixupINSCRIPCION(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (INSCRIPCION item in e.NewItems)
                {
                    item.ALUMNO = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("INSCRIPCION", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (INSCRIPCION item in e.OldItems)
                {
                    if (ReferenceEquals(item.ALUMNO, this))
                    {
                        item.ALUMNO = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("INSCRIPCION", item);
                    }
                }
            }
        }
    
        private void FixupREPRESENTANTE(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (REPRESENTANTE item in e.NewItems)
                {
                    item.ALUMNO = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("REPRESENTANTE", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (REPRESENTANTE item in e.OldItems)
                {
                    if (ReferenceEquals(item.ALUMNO, this))
                    {
                        item.ALUMNO = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("REPRESENTANTE", item);
                    }
                }
            }
        }

        #endregion
    }
}
