//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios en este archivo pueden ocasionar un comportamiento incorrecto y se perderán si
//     el código se vuelve a generar.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
using Capas.Dominio.Core.Entidades;

namespace Oporie.Dominio.ModuloPrincipal.Entidades
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(ALUMNO))]
    [KnownType(typeof(AREA_GEOGRAFICA))]
    [KnownType(typeof(CODIGOS))]
    public partial class AREA_GEOGRAFICA: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Propiedades primitivas
    
        [DataMember]
        public System.Guid ID_AREAGEOGRAFICA
        {
            get { return _iD_AREAGEOGRAFICA; }
            set
            {
                if (_iD_AREAGEOGRAFICA != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("La propiedad 'ID_AREAGEOGRAFICA' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.");
                    }
                    _iD_AREAGEOGRAFICA = value;
                    OnPropertyChanged("ID_AREAGEOGRAFICA");
                }
            }
        }
        private System.Guid _iD_AREAGEOGRAFICA;
    
        [DataMember]
        public Nullable<System.Guid> ID_AREAGEOPADRE
        {
            get { return _iD_AREAGEOPADRE; }
            set
            {
                if (_iD_AREAGEOPADRE != value)
                {
                    ChangeTracker.RecordOriginalValue("ID_AREAGEOPADRE", _iD_AREAGEOPADRE);
                    if (!IsDeserializing)
                    {
                        if (AREA_GEOGRAFICA2 != null && AREA_GEOGRAFICA2.ID_AREAGEOGRAFICA != value)
                        {
                            AREA_GEOGRAFICA2 = null;
                        }
                    }
                    _iD_AREAGEOPADRE = value;
                    OnPropertyChanged("ID_AREAGEOPADRE");
                }
            }
        }
        private Nullable<System.Guid> _iD_AREAGEOPADRE;
    
        [DataMember]
        public string ID_CODIGO
        {
            get { return _iD_CODIGO; }
            set
            {
                if (_iD_CODIGO != value)
                {
                    ChangeTracker.RecordOriginalValue("ID_CODIGO", _iD_CODIGO);
                    if (!IsDeserializing)
                    {
                        if (CODIGOS != null && CODIGOS.ID_CODIGO != value)
                        {
                            CODIGOS = null;
                        }
                    }
                    _iD_CODIGO = value;
                    OnPropertyChanged("ID_CODIGO");
                }
            }
        }
        private string _iD_CODIGO;
    
        [DataMember]
        public string AG_DESCRIPCION
        {
            get { return _aG_DESCRIPCION; }
            set
            {
                if (_aG_DESCRIPCION != value)
                {
                    _aG_DESCRIPCION = value;
                    OnPropertyChanged("AG_DESCRIPCION");
                }
            }
        }
        private string _aG_DESCRIPCION;
    
        [DataMember]
        public bool AG_ESTADO
        {
            get { return _aG_ESTADO; }
            set
            {
                if (_aG_ESTADO != value)
                {
                    _aG_ESTADO = value;
                    OnPropertyChanged("AG_ESTADO");
                }
            }
        }
        private bool _aG_ESTADO;

        #endregion
        #region Propiedades de navegación
    
        [DataMember]
        public TrackableCollection<ALUMNO> ALUMNO
        {
            get
            {
                if (_aLUMNO == null)
                {
                    _aLUMNO = new TrackableCollection<ALUMNO>();
                    _aLUMNO.CollectionChanged += FixupALUMNO;
                }
                return _aLUMNO;
            }
            set
            {
                if (!ReferenceEquals(_aLUMNO, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking");
                    }
                    if (_aLUMNO != null)
                    {
                        _aLUMNO.CollectionChanged -= FixupALUMNO;
                    }
                    _aLUMNO = value;
                    if (_aLUMNO != null)
                    {
                        _aLUMNO.CollectionChanged += FixupALUMNO;
                    }
                    OnNavigationPropertyChanged("ALUMNO");
                }
            }
        }
        private TrackableCollection<ALUMNO> _aLUMNO;
    
        [DataMember]
        public TrackableCollection<AREA_GEOGRAFICA> AREA_GEOGRAFICA1
        {
            get
            {
                if (_aREA_GEOGRAFICA1 == null)
                {
                    _aREA_GEOGRAFICA1 = new TrackableCollection<AREA_GEOGRAFICA>();
                    _aREA_GEOGRAFICA1.CollectionChanged += FixupAREA_GEOGRAFICA1;
                }
                return _aREA_GEOGRAFICA1;
            }
            set
            {
                if (!ReferenceEquals(_aREA_GEOGRAFICA1, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking");
                    }
                    if (_aREA_GEOGRAFICA1 != null)
                    {
                        _aREA_GEOGRAFICA1.CollectionChanged -= FixupAREA_GEOGRAFICA1;
                    }
                    _aREA_GEOGRAFICA1 = value;
                    if (_aREA_GEOGRAFICA1 != null)
                    {
                        _aREA_GEOGRAFICA1.CollectionChanged += FixupAREA_GEOGRAFICA1;
                    }
                    OnNavigationPropertyChanged("AREA_GEOGRAFICA1");
                }
            }
        }
        private TrackableCollection<AREA_GEOGRAFICA> _aREA_GEOGRAFICA1;
    
        [DataMember]
        public AREA_GEOGRAFICA AREA_GEOGRAFICA2
        {
            get { return _aREA_GEOGRAFICA2; }
            set
            {
                if (!ReferenceEquals(_aREA_GEOGRAFICA2, value))
                {
                    var previousValue = _aREA_GEOGRAFICA2;
                    _aREA_GEOGRAFICA2 = value;
                    FixupAREA_GEOGRAFICA2(previousValue);
                    OnNavigationPropertyChanged("AREA_GEOGRAFICA2");
                }
            }
        }
        private AREA_GEOGRAFICA _aREA_GEOGRAFICA2;
    
        [DataMember]
        public CODIGOS CODIGOS
        {
            get { return _cODIGOS; }
            set
            {
                if (!ReferenceEquals(_cODIGOS, value))
                {
                    var previousValue = _cODIGOS;
                    _cODIGOS = value;
                    FixupCODIGOS(previousValue);
                    OnNavigationPropertyChanged("CODIGOS");
                }
            }
        }
        private CODIGOS _cODIGOS;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            ALUMNO.Clear();
            AREA_GEOGRAFICA1.Clear();
            AREA_GEOGRAFICA2 = null;
            CODIGOS = null;
        }

        #endregion
        #region Corrección de asociación
    
        private void FixupAREA_GEOGRAFICA2(AREA_GEOGRAFICA previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.AREA_GEOGRAFICA1.Contains(this))
            {
                previousValue.AREA_GEOGRAFICA1.Remove(this);
            }
    
            if (AREA_GEOGRAFICA2 != null)
            {
                if (!AREA_GEOGRAFICA2.AREA_GEOGRAFICA1.Contains(this))
                {
                    AREA_GEOGRAFICA2.AREA_GEOGRAFICA1.Add(this);
                }
    
                ID_AREAGEOPADRE = AREA_GEOGRAFICA2.ID_AREAGEOGRAFICA;
            }
            else if (!skipKeys)
            {
                ID_AREAGEOPADRE = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("AREA_GEOGRAFICA2")
                    && (ChangeTracker.OriginalValues["AREA_GEOGRAFICA2"] == AREA_GEOGRAFICA2))
                {
                    ChangeTracker.OriginalValues.Remove("AREA_GEOGRAFICA2");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("AREA_GEOGRAFICA2", previousValue);
                }
                if (AREA_GEOGRAFICA2 != null && !AREA_GEOGRAFICA2.ChangeTracker.ChangeTrackingEnabled)
                {
                    AREA_GEOGRAFICA2.StartTracking();
                }
            }
        }
    
        private void FixupCODIGOS(CODIGOS previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.AREA_GEOGRAFICA.Contains(this))
            {
                previousValue.AREA_GEOGRAFICA.Remove(this);
            }
    
            if (CODIGOS != null)
            {
                if (!CODIGOS.AREA_GEOGRAFICA.Contains(this))
                {
                    CODIGOS.AREA_GEOGRAFICA.Add(this);
                }
    
                ID_CODIGO = CODIGOS.ID_CODIGO;
            }
            else if (!skipKeys)
            {
                ID_CODIGO = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("CODIGOS")
                    && (ChangeTracker.OriginalValues["CODIGOS"] == CODIGOS))
                {
                    ChangeTracker.OriginalValues.Remove("CODIGOS");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("CODIGOS", previousValue);
                }
                if (CODIGOS != null && !CODIGOS.ChangeTracker.ChangeTrackingEnabled)
                {
                    CODIGOS.StartTracking();
                }
            }
        }
    
        private void FixupALUMNO(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ALUMNO item in e.NewItems)
                {
                    item.AREA_GEOGRAFICA = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("ALUMNO", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ALUMNO item in e.OldItems)
                {
                    if (ReferenceEquals(item.AREA_GEOGRAFICA, this))
                    {
                        item.AREA_GEOGRAFICA = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("ALUMNO", item);
                    }
                }
            }
        }
    
        private void FixupAREA_GEOGRAFICA1(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (AREA_GEOGRAFICA item in e.NewItems)
                {
                    item.AREA_GEOGRAFICA2 = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("AREA_GEOGRAFICA1", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (AREA_GEOGRAFICA item in e.OldItems)
                {
                    if (ReferenceEquals(item.AREA_GEOGRAFICA2, this))
                    {
                        item.AREA_GEOGRAFICA2 = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("AREA_GEOGRAFICA1", item);
                    }
                }
            }
        }

        #endregion
    }
}
