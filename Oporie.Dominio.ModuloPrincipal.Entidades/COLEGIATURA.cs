//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios en este archivo pueden ocasionar un comportamiento incorrecto y se perderán si
//     el código se vuelve a generar.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
using Capas.Dominio.Core.Entidades;

namespace Oporie.Dominio.ModuloPrincipal.Entidades
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(HORARIO))]
    [KnownType(typeof(PERIODO))]
    public partial class COLEGIATURA: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Propiedades primitivas
    
        [DataMember]
        public System.Guid ID_COLEGIATURA
        {
            get { return _iD_COLEGIATURA; }
            set
            {
                if (_iD_COLEGIATURA != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("La propiedad 'ID_COLEGIATURA' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.");
                    }
                    _iD_COLEGIATURA = value;
                    OnPropertyChanged("ID_COLEGIATURA");
                }
            }
        }
        private System.Guid _iD_COLEGIATURA;
    
        [DataMember]
        public System.Guid ID_PERIODO
        {
            get { return _iD_PERIODO; }
            set
            {
                if (_iD_PERIODO != value)
                {
                    ChangeTracker.RecordOriginalValue("ID_PERIODO", _iD_PERIODO);
                    if (!IsDeserializing)
                    {
                        if (PERIODO != null && PERIODO.ID_PERIODO != value)
                        {
                            PERIODO = null;
                        }
                    }
                    _iD_PERIODO = value;
                    OnPropertyChanged("ID_PERIODO");
                }
            }
        }
        private System.Guid _iD_PERIODO;
    
        [DataMember]
        public System.Guid ID_HORARIO
        {
            get { return _iD_HORARIO; }
            set
            {
                if (_iD_HORARIO != value)
                {
                    ChangeTracker.RecordOriginalValue("ID_HORARIO", _iD_HORARIO);
                    if (!IsDeserializing)
                    {
                        if (HORARIO != null && HORARIO.ID_HORARIO != value)
                        {
                            HORARIO = null;
                        }
                    }
                    _iD_HORARIO = value;
                    OnPropertyChanged("ID_HORARIO");
                }
            }
        }
        private System.Guid _iD_HORARIO;
    
        [DataMember]
        public double COL_VALOR
        {
            get { return _cOL_VALOR; }
            set
            {
                if (_cOL_VALOR != value)
                {
                    _cOL_VALOR = value;
                    OnPropertyChanged("COL_VALOR");
                }
            }
        }
        private double _cOL_VALOR;
    
        [DataMember]
        public string COL_DESCRIPCION
        {
            get { return _cOL_DESCRIPCION; }
            set
            {
                if (_cOL_DESCRIPCION != value)
                {
                    _cOL_DESCRIPCION = value;
                    OnPropertyChanged("COL_DESCRIPCION");
                }
            }
        }
        private string _cOL_DESCRIPCION;
    
        [DataMember]
        public Nullable<System.DateTime> COL_FECHAPAGO
        {
            get { return _cOL_FECHAPAGO; }
            set
            {
                if (_cOL_FECHAPAGO != value)
                {
                    _cOL_FECHAPAGO = value;
                    OnPropertyChanged("COL_FECHAPAGO");
                }
            }
        }
        private Nullable<System.DateTime> _cOL_FECHAPAGO;
    
        [DataMember]
        public bool COL_ESTADO
        {
            get { return _cOL_ESTADO; }
            set
            {
                if (_cOL_ESTADO != value)
                {
                    _cOL_ESTADO = value;
                    OnPropertyChanged("COL_ESTADO");
                }
            }
        }
        private bool _cOL_ESTADO;

        #endregion
        #region Propiedades de navegación
    
        [DataMember]
        public HORARIO HORARIO
        {
            get { return _hORARIO; }
            set
            {
                if (!ReferenceEquals(_hORARIO, value))
                {
                    var previousValue = _hORARIO;
                    _hORARIO = value;
                    FixupHORARIO(previousValue);
                    OnNavigationPropertyChanged("HORARIO");
                }
            }
        }
        private HORARIO _hORARIO;
    
        [DataMember]
        public PERIODO PERIODO
        {
            get { return _pERIODO; }
            set
            {
                if (!ReferenceEquals(_pERIODO, value))
                {
                    var previousValue = _pERIODO;
                    _pERIODO = value;
                    FixupPERIODO(previousValue);
                    OnNavigationPropertyChanged("PERIODO");
                }
            }
        }
        private PERIODO _pERIODO;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            HORARIO = null;
            PERIODO = null;
        }

        #endregion
        #region Corrección de asociación
    
        private void FixupHORARIO(HORARIO previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.COLEGIATURA.Contains(this))
            {
                previousValue.COLEGIATURA.Remove(this);
            }
    
            if (HORARIO != null)
            {
                if (!HORARIO.COLEGIATURA.Contains(this))
                {
                    HORARIO.COLEGIATURA.Add(this);
                }
    
                ID_HORARIO = HORARIO.ID_HORARIO;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("HORARIO")
                    && (ChangeTracker.OriginalValues["HORARIO"] == HORARIO))
                {
                    ChangeTracker.OriginalValues.Remove("HORARIO");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("HORARIO", previousValue);
                }
                if (HORARIO != null && !HORARIO.ChangeTracker.ChangeTrackingEnabled)
                {
                    HORARIO.StartTracking();
                }
            }
        }
    
        private void FixupPERIODO(PERIODO previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.COLEGIATURA.Contains(this))
            {
                previousValue.COLEGIATURA.Remove(this);
            }
    
            if (PERIODO != null)
            {
                if (!PERIODO.COLEGIATURA.Contains(this))
                {
                    PERIODO.COLEGIATURA.Add(this);
                }
    
                ID_PERIODO = PERIODO.ID_PERIODO;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("PERIODO")
                    && (ChangeTracker.OriginalValues["PERIODO"] == PERIODO))
                {
                    ChangeTracker.OriginalValues.Remove("PERIODO");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("PERIODO", previousValue);
                }
                if (PERIODO != null && !PERIODO.ChangeTracker.ChangeTrackingEnabled)
                {
                    PERIODO.StartTracking();
                }
            }
        }

        #endregion
    }
}
