//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios en este archivo pueden ocasionar un comportamiento incorrecto y se perderán si
//     el código se vuelve a generar.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
using Capas.Dominio.Core.Entidades;

namespace Oporie.Dominio.ModuloPrincipal.Entidades
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(ALUMNO))]
    [KnownType(typeof(MATRICULA))]
    public partial class INSCRIPCION: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Propiedades primitivas
    
        [DataMember]
        public System.Guid ID_INSCRIPCION
        {
            get { return _iD_INSCRIPCION; }
            set
            {
                if (_iD_INSCRIPCION != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("La propiedad 'ID_INSCRIPCION' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.");
                    }
                    _iD_INSCRIPCION = value;
                    OnPropertyChanged("ID_INSCRIPCION");
                }
            }
        }
        private System.Guid _iD_INSCRIPCION;
    
        [DataMember]
        public System.Guid ID_ALUMNO
        {
            get { return _iD_ALUMNO; }
            set
            {
                if (_iD_ALUMNO != value)
                {
                    ChangeTracker.RecordOriginalValue("ID_ALUMNO", _iD_ALUMNO);
                    if (!IsDeserializing)
                    {
                        if (ALUMNO != null && ALUMNO.ID_ALUMNO != value)
                        {
                            ALUMNO = null;
                        }
                    }
                    _iD_ALUMNO = value;
                    OnPropertyChanged("ID_ALUMNO");
                }
            }
        }
        private System.Guid _iD_ALUMNO;
    
        [DataMember]
        public Nullable<System.DateTime> INS_FECHAINGRESO
        {
            get { return _iNS_FECHAINGRESO; }
            set
            {
                if (_iNS_FECHAINGRESO != value)
                {
                    _iNS_FECHAINGRESO = value;
                    OnPropertyChanged("INS_FECHAINGRESO");
                }
            }
        }
        private Nullable<System.DateTime> _iNS_FECHAINGRESO;
    
        [DataMember]
        public string INS_OBSERVACION
        {
            get { return _iNS_OBSERVACION; }
            set
            {
                if (_iNS_OBSERVACION != value)
                {
                    _iNS_OBSERVACION = value;
                    OnPropertyChanged("INS_OBSERVACION");
                }
            }
        }
        private string _iNS_OBSERVACION;
    
        [DataMember]
        public bool INS_ESTADO
        {
            get { return _iNS_ESTADO; }
            set
            {
                if (_iNS_ESTADO != value)
                {
                    _iNS_ESTADO = value;
                    OnPropertyChanged("INS_ESTADO");
                }
            }
        }
        private bool _iNS_ESTADO;

        #endregion
        #region Propiedades de navegación
    
        [DataMember]
        public ALUMNO ALUMNO
        {
            get { return _aLUMNO; }
            set
            {
                if (!ReferenceEquals(_aLUMNO, value))
                {
                    var previousValue = _aLUMNO;
                    _aLUMNO = value;
                    FixupALUMNO(previousValue);
                    OnNavigationPropertyChanged("ALUMNO");
                }
            }
        }
        private ALUMNO _aLUMNO;
    
        [DataMember]
        public TrackableCollection<MATRICULA> MATRICULA
        {
            get
            {
                if (_mATRICULA == null)
                {
                    _mATRICULA = new TrackableCollection<MATRICULA>();
                    _mATRICULA.CollectionChanged += FixupMATRICULA;
                }
                return _mATRICULA;
            }
            set
            {
                if (!ReferenceEquals(_mATRICULA, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking");
                    }
                    if (_mATRICULA != null)
                    {
                        _mATRICULA.CollectionChanged -= FixupMATRICULA;
                    }
                    _mATRICULA = value;
                    if (_mATRICULA != null)
                    {
                        _mATRICULA.CollectionChanged += FixupMATRICULA;
                    }
                    OnNavigationPropertyChanged("MATRICULA");
                }
            }
        }
        private TrackableCollection<MATRICULA> _mATRICULA;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            ALUMNO = null;
            MATRICULA.Clear();
        }

        #endregion
        #region Corrección de asociación
    
        private void FixupALUMNO(ALUMNO previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.INSCRIPCION.Contains(this))
            {
                previousValue.INSCRIPCION.Remove(this);
            }
    
            if (ALUMNO != null)
            {
                if (!ALUMNO.INSCRIPCION.Contains(this))
                {
                    ALUMNO.INSCRIPCION.Add(this);
                }
    
                ID_ALUMNO = ALUMNO.ID_ALUMNO;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("ALUMNO")
                    && (ChangeTracker.OriginalValues["ALUMNO"] == ALUMNO))
                {
                    ChangeTracker.OriginalValues.Remove("ALUMNO");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("ALUMNO", previousValue);
                }
                if (ALUMNO != null && !ALUMNO.ChangeTracker.ChangeTrackingEnabled)
                {
                    ALUMNO.StartTracking();
                }
            }
        }
    
        private void FixupMATRICULA(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (MATRICULA item in e.NewItems)
                {
                    item.INSCRIPCION = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("MATRICULA", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (MATRICULA item in e.OldItems)
                {
                    if (ReferenceEquals(item.INSCRIPCION, this))
                    {
                        item.INSCRIPCION = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("MATRICULA", item);
                    }
                }
            }
        }

        #endregion
    }
}
