//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios en este archivo pueden ocasionar un comportamiento incorrecto y se perderán si
//     el código se vuelve a generar.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data.Common;
using System.Data.EntityClient;
using System.Data.Metadata.Edm;
using System.Data.Objects.DataClasses;
using System.Data.Objects;
using System.Data;
using System.Diagnostics;
using System.Globalization;
using System.Linq;


using Microsoft.Practices.Unity;
using Capas.Dominio.Core.Entidades;
using Capas.Dominio.Core;
using Oporie.Dominio.ModuloPrincipal.Entidades;
using System.Reflection;

namespace Oporie.Infraestructura.Data.ModuloPrincipal
{
    [System.Diagnostics.DebuggerNonUserCode()]
    public partial class ModuloPrincipalContext : ObjectContext,IModuloPrincipalModel
    {
        public const string ConnectionString = "name=ModuloPrincipalContext";
        public const string ContainerName = "ModuloPrincipalContext";
    
        #region Constructors
    	[InjectionConstructor()]
        public ModuloPrincipalContext()
            : base(ConnectionString, ContainerName)
        {
            Initialize();
        }
    
        public ModuloPrincipalContext(string connectionString)
            : base(connectionString, ContainerName)
        {
            Initialize();
        }
    
        public ModuloPrincipalContext(EntityConnection connection)
            : base(connection, ContainerName)
        {
            Initialize();
        }
    
        private void Initialize()
        {
            // La creación de servidores proxy requiere el uso de ProxyDataContractResolver y
            // puede permitir la carga diferida que puede expandir el gráfico durante la serialización.
            ContextOptions.ProxyCreationEnabled = false;
            ObjectMaterialized += new ObjectMaterializedEventHandler(HandleObjectMaterialized);
        }
    
        private void HandleObjectMaterialized(object sender, ObjectMaterializedEventArgs e)
        {
            var entity = e.Entity as IObjectWithChangeTracker;
            if (entity != null)
            {
                bool changeTrackingEnabled = entity.ChangeTracker.ChangeTrackingEnabled;
                try
                {
                    entity.MarkAsUnchanged();
                }
                finally
                {
                    entity.ChangeTracker.ChangeTrackingEnabled = changeTrackingEnabled;
                }
                this.StoreReferenceKeyValues(entity);
            }
        }
    
        #endregion
    
        #region IModuloPrincipalModel
    	public void Attach<TEntity>(TEntity item) 
    		where TEntity : class,IObjectWithChangeTracker, new()
    	{
    		//recover entity set name
            string entitySetName = base.CreateObjectSet<TEntity>().EntitySet.Name;
    
           	//attach to this ObjectSet  
            base.AttachTo(entitySetName, item);
    	}
    	public new IObjectSet<TEntity> CreateObjectSet<TEntity>() 
    		where TEntity : class,IObjectWithChangeTracker, new()
    	{
    		return base.CreateObjectSet<TEntity>() as IObjectSet<TEntity>;
    	}
    	public void SetChanges<TEntity>(TEntity item)
    		where TEntity : class, IObjectWithChangeTracker, new()
    	{
    		//Recover object set if exist and call ApplyChanges Extension method
            Type matchType = typeof(IObjectSet<>).MakeGenericType(typeof(TEntity));
    
            foreach (PropertyInfo propertyInfo in this.GetType().GetProperties())
            {
            	if (propertyInfo.PropertyType == matchType)
    			{
               		((ObjectSet<TEntity>)propertyInfo.GetValue(this, null)).ApplyChanges<TEntity>(item);
    				return;
    			}
            }
                
            //if not exist objectSet property throw exception
            throw new InvalidOperationException("Cannot apply changes. Not exist ObjectSet for item type");
    
    	}
    	public void CommitAndRefreshChanges()
    	{
    		try
    		{
    			//Default option is DetectChangesBeforeSave
    			base.SaveChanges();
    			
    			 //accept all changes in STE entities attached in context
                IEnumerable<IObjectWithChangeTracker> steEntities = (from entry in this.ObjectStateManager.GetObjectStateEntries(~EntityState.Detached)
                                                                         where entry.Entity != null && (entry.Entity as IObjectWithChangeTracker != null)
                                                                         select entry.Entity as IObjectWithChangeTracker);
    
                steEntities.ToList().ForEach(ste => ste.MarkAsUnchanged());
    		}
    		catch (OptimisticConcurrencyException ex)
    		{
    			
    			//if client wins refresh data ( queries database and adapt original values
    			//and re-save changes in client
    			base.Refresh(RefreshMode.ClientWins, ex.StateEntries.Select(se => se.Entity));
    			base.SaveChanges(); 
    			
    			//accept all changes in STE entities attached in context
                IEnumerable<IObjectWithChangeTracker> steEntities = (from entry in this.ObjectStateManager.GetObjectStateEntries(~EntityState.Detached)
                                                                     where entry.Entity != null && (entry.Entity as IObjectWithChangeTracker != null)
                                                                     select entry.Entity as IObjectWithChangeTracker);
    
                steEntities.ToList().ForEach(ste => ste.MarkAsUnchanged());
    		}
    	}
    	public  void Commit()
    	{
    		//Default option is DetectChangesBeforeSave
    		base.SaveChanges();
    		
    		 //accept all changes in STE entities attached in context
    		 IEnumerable<IObjectWithChangeTracker> steEntities = (from entry in this.ObjectStateManager.GetObjectStateEntries(~EntityState.Detached)
                                                                  where entry.Entity != null && (entry.Entity as IObjectWithChangeTracker != null)
                                                                  select entry.Entity as IObjectWithChangeTracker);
    
            steEntities.ToList().ForEach(ste => ste.MarkAsUnchanged());
    	}
    	public void RollbackChanges()
    	{
    		//Refresh context and override changes
                
    		IEnumerable<object> itemsToRefresh = base.ObjectStateManager.GetObjectStateEntries(EntityState.Modified)
                                                                        .Where(ose=>!ose.IsRelationship && ose.Entity != null)
                                                                        .Select(ose=>ose.Entity);
            base.Refresh(RefreshMode.StoreWins, itemsToRefresh);
    	}
    	public IEnumerable<TEntity> ExecuteQuery<TEntity>(string sqlQuery, params object[] parameters)
        {
    		return base.ExecuteStoreQuery<TEntity>(sqlQuery, parameters);
       	}
    
    	public int ExecuteCommand(string sqlCommand, params object[] parameters)
    	{
    		return base.ExecuteStoreCommand(sqlCommand, parameters);
    	}
    	

        #endregion

    
        #region Propiedades de ObjectSet
    
        public IObjectSet<ALUMNO> ALUMNO
        {
            get { return _aLUMNO  ?? (_aLUMNO = CreateObjectSet<ALUMNO>("ALUMNO")); }
        }
        private ObjectSet<ALUMNO> _aLUMNO;
    
        public IObjectSet<ENTORNO_FAMILIAR> ENTORNO_FAMILIAR
        {
            get { return _eNTORNO_FAMILIAR  ?? (_eNTORNO_FAMILIAR = CreateObjectSet<ENTORNO_FAMILIAR>("ENTORNO_FAMILIAR")); }
        }
        private ObjectSet<ENTORNO_FAMILIAR> _eNTORNO_FAMILIAR;
    
        public IObjectSet<PERSONA> PERSONA
        {
            get { return _pERSONA  ?? (_pERSONA = CreateObjectSet<PERSONA>("PERSONA")); }
        }
        private ObjectSet<PERSONA> _pERSONA;
    
        public IObjectSet<REPRESENTANTE> REPRESENTANTE
        {
            get { return _rEPRESENTANTE  ?? (_rEPRESENTANTE = CreateObjectSet<REPRESENTANTE>("REPRESENTANTE")); }
        }
        private ObjectSet<REPRESENTANTE> _rEPRESENTANTE;
    
        public IObjectSet<REPRESENTANTE_LEGAL> REPRESENTANTE_LEGAL
        {
            get { return _rEPRESENTANTE_LEGAL  ?? (_rEPRESENTANTE_LEGAL = CreateObjectSet<REPRESENTANTE_LEGAL>("REPRESENTANTE_LEGAL")); }
        }
        private ObjectSet<REPRESENTANTE_LEGAL> _rEPRESENTANTE_LEGAL;
    
        public IObjectSet<AREA_GEOGRAFICA> AREA_GEOGRAFICA
        {
            get { return _aREA_GEOGRAFICA  ?? (_aREA_GEOGRAFICA = CreateObjectSet<AREA_GEOGRAFICA>("AREA_GEOGRAFICA")); }
        }
        private ObjectSet<AREA_GEOGRAFICA> _aREA_GEOGRAFICA;
    
        public IObjectSet<CARGO> CARGO
        {
            get { return _cARGO  ?? (_cARGO = CreateObjectSet<CARGO>("CARGO")); }
        }
        private ObjectSet<CARGO> _cARGO;
    
        public IObjectSet<CODIGOS> CODIGOS
        {
            get { return _cODIGOS  ?? (_cODIGOS = CreateObjectSet<CODIGOS>("CODIGOS")); }
        }
        private ObjectSet<CODIGOS> _cODIGOS;
    
        public IObjectSet<HORARIO> HORARIO
        {
            get { return _hORARIO  ?? (_hORARIO = CreateObjectSet<HORARIO>("HORARIO")); }
        }
        private ObjectSet<HORARIO> _hORARIO;
    
        public IObjectSet<PARENTESCO> PARENTESCO
        {
            get { return _pARENTESCO  ?? (_pARENTESCO = CreateObjectSet<PARENTESCO>("PARENTESCO")); }
        }
        private ObjectSet<PARENTESCO> _pARENTESCO;
    
        public IObjectSet<PERIODO> PERIODO
        {
            get { return _pERIODO  ?? (_pERIODO = CreateObjectSet<PERIODO>("PERIODO")); }
        }
        private ObjectSet<PERIODO> _pERIODO;
    
        public IObjectSet<REFERENCIA> REFERENCIA
        {
            get { return _rEFERENCIA  ?? (_rEFERENCIA = CreateObjectSet<REFERENCIA>("REFERENCIA")); }
        }
        private ObjectSet<REFERENCIA> _rEFERENCIA;
    
        public IObjectSet<REQUISITO> REQUISITO
        {
            get { return _rEQUISITO  ?? (_rEQUISITO = CreateObjectSet<REQUISITO>("REQUISITO")); }
        }
        private ObjectSet<REQUISITO> _rEQUISITO;
    
        public IObjectSet<TELEFONO> TELEFONO
        {
            get { return _tELEFONO  ?? (_tELEFONO = CreateObjectSet<TELEFONO>("TELEFONO")); }
        }
        private ObjectSet<TELEFONO> _tELEFONO;
    
        public IObjectSet<COLEGIATURA> COLEGIATURA
        {
            get { return _cOLEGIATURA  ?? (_cOLEGIATURA = CreateObjectSet<COLEGIATURA>("COLEGIATURA")); }
        }
        private ObjectSet<COLEGIATURA> _cOLEGIATURA;
    
        public IObjectSet<INSCRIPCION> INSCRIPCION
        {
            get { return _iNSCRIPCION  ?? (_iNSCRIPCION = CreateObjectSet<INSCRIPCION>("INSCRIPCION")); }
        }
        private ObjectSet<INSCRIPCION> _iNSCRIPCION;
    
        public IObjectSet<MATRICULA> MATRICULA
        {
            get { return _mATRICULA  ?? (_mATRICULA = CreateObjectSet<MATRICULA>("MATRICULA")); }
        }
        private ObjectSet<MATRICULA> _mATRICULA;
    
        public IObjectSet<REQUISITOS_MATRICULA> REQUISITOS_MATRICULA
        {
            get { return _rEQUISITOS_MATRICULA  ?? (_rEQUISITOS_MATRICULA = CreateObjectSet<REQUISITOS_MATRICULA>("REQUISITOS_MATRICULA")); }
        }
        private ObjectSet<REQUISITOS_MATRICULA> _rEQUISITOS_MATRICULA;

        #endregion

    }
}
